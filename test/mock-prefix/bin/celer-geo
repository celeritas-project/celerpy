#!/usr/bin/env python
# Copyright 2024 UT-Battelle, LLC, and other Celeritas developers.
# See the top-level COPYRIGHT file for details.
# SPDX-License-Identifier: (Apache-2.0 OR MIT)
"""Mock the celer-geo process."""

from os import environ

from mockutils import dump, expect_trace, log, read_input, setup_signals

setup_signals()


# Check environment
celer_log = environ.get("CELER_LOG")
assert celer_log == "debug", f"Expected CELER_LOG=debug, got {celer_log}"
celer_log_local = environ.get("CELER_LOG_LOCAL")
assert celer_log_local == "warning", f"Expected CELER_LOG_LOCAL=warning, got {celer_log_local}"
g4org_verbose = environ.get("G4ORG_VERBOSE")
assert g4org_verbose == "True", f"Expected G4ORG_VERBOSE=1, got {g4org_verbose}"

# Read the initial command and echo it (with version)
cmd = read_input()
log("read model", repr(cmd))
assert cmd["geometry_file"]
cmd["version"] = "0.7.0-dev"
cmd["version_hex"] = 0x000700
dump(cmd)

log("entering loop")
expect_trace(
    '{"geometry":"orange","memspace":null,"volumes":true,"image":{"lower_left":[0,0,0],"upper_right":[1,1,0],"rightward":[1,0,0],"vertical_pixels":4,"horizontal_divisor":null}}',
    '{"image":{"_units":"cgs","dims":[4,4],"down":[0.0,-1.0,0.0],"origin":[0.0,1.0,0.0],"pixel_width":0.25,"right":[1.0,0.0,0.0]},"sizeof_int":4,"trace":{"geometry":"orange","memspace":"host","volumes":true},"volumes":["[EXTERIOR]","inner","world"]}\n',
)
expect_trace(
    '{"geometry": "orange", "memspace": null, "volumes": false, "image": null}',
    '{"image":{"_units":"cgs","dims":[4,4],"down":[0.0,-1.0,0.0],"origin":[0.0,1.0,0.0],"pixel_width":0.25,"right":[1.0,0.0,0.0]},"sizeof_int":4,"trace":{"geometry":"orange","memspace":"host","volumes":false}}\n',
)
expect_trace(
    '{"geometry":"geant4","memspace":null,"volumes":true,"image":null}',
    '{"image":{"_units":"cgs","dims":[4,4],"down":[0.0,-1.0,0.0],"origin":[0.0,1.0,0.0],"pixel_width":0.25,"right":[1.0,0.0,0.0]},"sizeof_int":4,"trace":{"geometry":"geant4","memspace":"host","volumes":true},"volumes":["inner","world"]}\n',
)

cmd = read_input()
assert cmd == None
dump(
    {
        "runtime": {"device": None, "kernels": [], "version": "0.7.0-dev"},
        "timers": {
            "load_geant4": 0.1,
            "load_orange": 0.2,
            "raytrace_geant4_host": 0.3,
            "raytrace_orange_host": 0.4,
        },
    }
)
